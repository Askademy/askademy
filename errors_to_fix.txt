To create a Django channel consumer for private chat between two people, you can follow these steps:

1. Define a model for the chat room that stores the two users who are chatting. For example:

```python
class ChatRoom(models.Model):
    user1 = models.ForeignKey(User, on_delete=models.CASCADE, related_name='user1')
    user2 = models.ForeignKey(User, on_delete=models.CASCADE, related_name='user2')
    room_name = models.CharField(max_length=128, unique=True)
```

2. Define a consumer class that inherits from `AsyncWebsocketConsumer` and implements the methods for connecting, disconnecting, receiving and sending messages. For example:

```python
class ChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        # Get the room name from the URL
        self.room_name = self.scope['url_route']['kwargs']['room_name']
        # Get the chat room object from the database
        self.room = await self.get_room(self.room_name)
        # Check if the current user is one of the participants in the chat room
        if self.scope['user'] in [self.room.user1, self.room.user2]:
            # Join the room group using the room name
            self.room_group_name = f'chat_{self.room_name}'
            await self.channel_layer.group_add(self.room_group_name, self.channel_name)
            # Accept the websocket connection
            await self.accept()
        else:
            # Reject the websocket connection
            await self.close()

    async def disconnect(self, close_code):
        # Leave the room group
        await self.channel_layer.group_discard(self.room_group_name, self.channel_name)

    async def receive(self, text_data):
        # Receive a message from the websocket
        text_data_json = json.loads(text_data)
        message = text_data_json['message']
        # Send the message to the room group
        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'chat_message',
                'message': message,
                'sender': self.scope['user'].username,
            }
        )

    async def chat_message(self, event):
        # Receive a message from the room group
        message = event['message']
        sender = event['sender']
        # Send the message to the websocket
        await self.send(text_data=json.dumps({
            'message': message,
            'sender': sender,
        }))

    @sync_to_async   
    def get_room(self, room_name):
        # Get the chat room object from the database or create a new one if it does not exist
        return ChatRoom.objects.get_or_create(room_name=room_name)[0]
```

3. Define a URL pattern for the chat room using the `path` function and the `ChatConsumer` class. For example:

```python
from django.urls import path
from . import consumers

websocket_urlpatterns = [
    path('ws/chat/<str:room_name>/', consumers.ChatConsumer.as_asgi()),
]
```

4. Define a template for the chat room that renders a form for sending messages and a list for displaying messages. For example:

```html
{% load static %}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8"/>
    <title>Chat Room</title>
</head>
<body>
    <h1>Chat Room: {{ room_name }}</h1>
    <ul id="chat-log">
    </ul>
    <form id="chat-form">
        <input id="chat-message-input" type="text" size="100"/>
        <input id="chat-message-submit" type="submit" value="Send"/>
    </form>
    <script src="{% static 'js/chat.js' %}"></script>
</body>
</html>
```

5. Define a JavaScript file for the chat room that handles the websocket connection and events. For example:

```javascript
// Get the elements from the HTML document
var chatLog = document.querySelector('#chat-log');
var chatForm = document.querySelector('#chat-form');
var chatMessageInput = document.querySelector('#chat-message-input');
var chatMessageSubmit = document.querySelector('#chat-message-submit');

// Create a websocket using the current window location and the room name
var wsScheme = window.location.protocol == "https:" ? "wss" : "ws";
var wsPath = wsScheme + '://' + window.location.host + '/ws/chat/' + roomName + '/';
var chatSocket = new WebSocket(wsPath);

// Define a function to append a message to the chat log
function appendMessage(message, sender) {
  var li = document.createElement('li');
  li.textContent = sender + ': ' + message;
  chatLog.appendChild(li);
}

// Define a function to handle websocket messages
chatSocket.onmessage = function(e) {
  var data = JSON.parse(e.data);
  var message = data['message'];
  var sender = data['sender'];
  appendMessage(message, sender);
};

// Define a function to handle websocket errors
chatSocket.onerror = function(e) {
  console.error('Chat socket error', e);
};

// Define a function to handle websocket closures
chatSocket.onclose = function(e) {
  console.error('Chat socket closed unexpectedly');
};

// Define a function to handle form submissions
chatForm.onsubmit = function(e) {
  e.preventDefault();
  var message = chatMessageInput.value;
  chatSocket.send(JSON.stringify({
    'message': message
  }));
  chatMessageInput.value = '';
};
```

6. Run the Django server and open the chat room URL in two different browsers or tabs. For example:

`http://localhost:8000/chat/room1/`

You can find more information and examples about Django channels and private chat in the following links:

- [Django Channels documentation](^1^)
- [Django Channels Private Chat server - Stack Overflow](^2^)
- [Is it Possible to do a private chat with Django Channels - Stack Overflow](^3^)
- [Django Realtime Chat App Tutorial - Code With Stein](^4^)
- [[Django Channels] Private Chat Advise - Using Django - Django Forum](^5^)
- [SurajFc/Django-channels-private-chat - GitHub](^6^)

Source: Conversation with Bing, 08/10/2023
(1) python 3.x - Django Channels Private Chat server - Stack Overflow. https://stackoverflow.com/questions/67020216/django-channels-private-chat-server.
(2) Is it Possible to do a private chat with Django Channels. https://stackoverflow.com/questions/53218535/is-it-possible-to-do-a-private-chat-with-django-channels.
(3) Django Realtime Chat App Tutorial - Code With Stein. https://codewithstein.com/django-realtime-chat-app-tutorial-simple-django-tutorial-with-channels-and-redis/.
(4) [Django Channels] Private Chat Advise - Using Django - Django Forum. https://forum.djangoproject.com/t/django-channels-private-chat-advise/1224.
(5) SurajFc/Django-channels-private-chat - GitHub. https://github.com/SurajFc/Django-channels-private-chat.
(6) undefined. https://channels.readthedocs.io/en/latest/topics/channel_layers.html.
(7) undefined. https://channels.readthedocs.io/en/latest/tutorial/index.html.